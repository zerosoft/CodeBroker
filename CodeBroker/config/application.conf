CodeBroker {
	akka {
		loggers = ["akka.event.slf4j.Slf4jLogger"]

		loglevel = "INFO"
		stdout - loglevel = "INFO"
		logging - filter = "akka.event.slf4j.Slf4jLoggingFilter"

		actor {
			provider = "cluster"
			debug {
				receive = off
				lifecycle = off
			}

			serializers {
				jackson - json = "akka.serialization.jackson.JacksonJsonSerializer"
			}
			serialization - bindings {
				"com.codebroker.core.actortype.message.IUserManager" = jackson - json "com.codebroker.core.actortype.message.ISession" = jackson - json "com.codebroker.core.actortype.message.IUser" = jackson - json "com.codebroker.api.internal.IPacket" = jackson - json "akka.actor.typed.ActorRef" = jackson - json
			}

		}

		remote {
			log - remote - lifecycle - events = on
			artery.canonical {
				hostname = 127.0 .0 .1
				port = 4251
			}
		}
		cluster {
			seed - nodes = [
				"akka://CodeBroker@127.0.0.1:4251",
				"akka://CodeBroker@127.0.0.1:4252"
			]
			auto - down - unreachable - after = 10 s
		}
	}
	game - logic {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread - pool - executor {
			fixed - pool - size = 2
		}
		throughput = 1
	}
	game - service {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread - pool - executor {
			fixed - pool - size = 2
		}
		throughput = 1
	}
}