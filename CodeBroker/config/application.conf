CodeBroker {
	akka {
		loggers = ["akka.event.slf4j.Slf4jLogger"]

		loglevel = "INFO"
		stdout-loglevel = "INFO"
		logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
		log-dead-letters = 10
		log-dead-letters-during-shutdown = on


		actor {
			provider = "cluster"

			debug {
				receive = off
				lifecycle = off
			}
			#序列化器
			serializers {
				jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
				code-broker = "com.codebroker.protocol.serialization.CodeBrokerRemoteSerializer"
				kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
				proto = "akka.remote.serialization.ProtobufSerializer"
			}
			#对应的绑定关系
			serialization-bindings {
				"com.codebroker.core.actortype.message.IUserManager" = code-broker
				"com.codebroker.core.actortype.message.ISession" = code-broker
				"com.codebroker.core.actortype.message.IService" = kryo
			  "com.codebroker.core.actortype.message.IService$Reply" = kryo

				"com.codebroker.core.actortype.message.IUser" = code-broker
				"com.codebroker.core.actortype.message.IUser$LogicEvent" = kryo
				"com.codebroker.api.internal.IPacket" = kryo

				"com.codebroker.api.event.Event"= kryo
				"com.codebroker.core.data.IObject" = kryo
				"com.codebroker.core.data.IArray" = kryo

				"akka.actor.typed.ActorRef" = kryo
			}

		}

		remote {
			log-remote-lifecycle-events = on
		}


		cluster {
//			seed-nodes = [
//				"akka://CodeBroker@127.0.0.1:2551",
//				"akka://CodeBroker@127.0.0.1:2552"
//			]
			downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
//			min-nr-of-members = 2
			log-info = on
			log-info-verbose = on
			sharding {
			  	least-shard-allocation-strategy.rebalance-absolute-limit = 20
			}

		}



	}

	game-logic {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
            # minimum number of threads to cap factor-based core number to
            core-pool-size-min = 2
            # No of core threads ... ceil(available processors * factor)
            core-pool-size-factor = 2.0
            # maximum number of threads to cap factor-based number to
            core-pool-size-max = 10
		}
		throughput = 1
	}
	game-service {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
			fixed-pool-size = 2
		}
		throughput = 1
	}

    akka.actor.default-blocking-io-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 2
      }
      throughput = 1
    }
}