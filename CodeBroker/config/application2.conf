CodeBroker {
	akka {
		loggers = ["akka.event.slf4j.Slf4jLogger"]

        #log-config-on-start = on

		loglevel = "INFO"
		stdout-loglevel = "INFO"
		logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
        log-dead-letters = 10
        log-dead-letters-during-shutdown = on


		actor {
			provider = "cluster"
			debug {
				receive = off
				lifecycle = off
			}

			serializers {
					jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
					code-broker = "com.codebroker.protocol.serialization.CodeBrokerRemoteSerializer"
				  kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
				  proto = "akka.remote.serialization.ProtobufSerializer"
			}
			serialization-bindings {
				"com.codebroker.core.actortype.message.IUserManager" = code-broker
				"com.codebroker.core.actortype.message.ISessionActor" = code-broker
				"com.codebroker.core.actortype.message.IUserActor" = code-broker
				"com.codebroker.core.actortype.message.IServiceActor" = kryo
				"com.codebroker.core.actortype.message.IServiceActor$Reply" = kryo

				"com.codebroker.api.internal.IPacket" = kryo

				"com.codebroker.api.event.Event"= kryo
				"com.codebroker.core.data.IObject" = code-broker
				"com.codebroker.core.data.IArray" = code-broker

				"akka.actor.typed.ActorRef" = kryo
			}

		}

		remote {
			log-remote-lifecycle-events = on
//			artery.canonical {
//				hostname = 127.0.0.1
//				port = 2553
//			}
		}
		cluster {
//			seed-nodes = [
//				"akka://CodeBroker@127.0.0.1:2552",
//				"akka://CodeBroker@127.0.0.1:2553"
//			]
			auto-down-unreachable-after = 20 s
			log-info = on
			log-info-verbose = on
			downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
//			split-brain-resolver.down-all-when-unstable = off
//			split-brain-resolver.stable-after = 20s
//			split-brain-resolver.active-strategy = keep-majority
			//			use-dispatcher = "akka.actor.internal-dispatcher"
//			roles = ["B"]
//			role {
//				min-nr-of-members = 1
//				B.min-nr-of-members = 1
//			}
			sharding
			{
//				number-of-shards = 100
				least-shard-allocation-strategy.rebalance-absolute-limit = 20
//				role = "B"
			}

//			multi-data-center {
//				self-data-center = "cluster"
//			}
		}

	}

	game-logic {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
            # minimum number of threads to cap factor-based core number to
            core-pool-size-min = 2
            # No of core threads ... ceil(available processors * factor)
            core-pool-size-factor = 2.0
            # maximum number of threads to cap factor-based number to
            core-pool-size-max = 10
		}
		throughput = 1
	}
	game-service {
		type = Dispatcher
		executor = "thread-pool-executor"
		thread-pool-executor {
			fixed-pool-size = 2
		}
		throughput = 1
	}

    akka.actor.default-blocking-io-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 2
      }
      throughput = 1
    }
}