plugins {
    id 'java'
}

group 'zerosoft'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public"
    }
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

def logback_version = '1.2.3'

dependencies {

    compile fileTree(dir: 'lib', include: '*.jar')

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.10.0'
    compile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.jodd:jodd-core:5.2.0'
    compile 'org.jodd:jodd-props:5.2.0'

    compile group: 'ch.qos.logback', name: 'logback-classic', version:  logback_version
    compile group: 'ch.qos.logback', name: 'logback-core',version:  logback_version
    compile group: 'ch.qos.logback', name: 'logback-access',version:  logback_version


    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    //反射
    compile group: 'com.esotericsoftware', name: 'reflectasm', version: '1.11.9'

    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    compile group: 'org.mybatis', name: 'mybatis', version: '3.5.6'
    // https://mvnrepository.com/artifact/com.mchange/c3p0
    compile group: 'com.mchange', name: 'c3p0', version: '0.9.5.5'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
    // https://mvnrepository.com/artifact/tk.mybatis/mapper
    compile group: 'tk.mybatis', name: 'mapper', version: '4.1.5'
    // https://mvnrepository.com/artifact/com.arenagod.gradle.MybatisGenerator/com.arenagod.gradle.MybatisGenerator.gradle.plugin
    compile group: 'com.arenagod.gradle.MybatisGenerator', name: 'com.arenagod.gradle.MybatisGenerator.gradle.plugin', version: '1.4', ext: 'pom'



    testCompile group: 'junit', name: 'junit', version: '4.12'

}
task copyJars(type:Copy) {
    from configurations.runtime
    into 'build/lib'
}

mybatisGenerator {
         verbose = true
         configFile = '/Users/zuoyuhui/Documents/project/idea/model/src/main/resources/mybatis/generator.xml'
     }


//task mybatisGenerate << {
////    def properties = getDbProperties()
//    ant.properties['targetProject'] = projectDir.path
////    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
////    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
////    ant.properties['userId'] = properties.getProperty("jdbc.user")
////    ant.properties['password'] = properties.getProperty("jdbc.pass")
////    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
////    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
////    ant.properties['modelPackage'] = properties.getProperty("package.model")
////    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
////    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
//    ant.taskdef(
//            name: 'mbgenerator',
//            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
//            classpath: configurations.mybatisGenerator.asPath
//    )
//    ant.mbgenerator(overwrite: true,
//            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
////        propertyset {
////            propertyref(name: 'targetProject')
////            propertyref(name: 'userId')
////            propertyref(name: 'driverClass')
////            propertyref(name: 'connectionURL')
////            propertyref(name: 'password')
////            propertyref(name: 'src_main_java')
////            propertyref(name: 'src_main_resources')
////            propertyref(name: 'modelPackage')
////            propertyref(name: 'mapperPackage')
////            propertyref(name: 'sqlMapperPackage')
////        }
//    }
//}